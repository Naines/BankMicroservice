server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prd"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update #If no tables create new tables, on basis on startup provided sql instructions
    show-sql: true #print sql queries in console
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

# Expose all management related actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true

eureka:
  instance:
    preferIpAddress: true #hostname is not used but should be used in prod if hs available
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      nainesh:
        accounts: DEBUG

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10 #no of requests to monitor before changing from closed to open
      permittedNumberOfCallsInHalfOpenState: 2 #2 requests can be allowed to half open to decide next state change
      failureRateThreshold: 50 #50% fail, then move to open state
      waitDurationInOpenState: 10000 #Wait 10s

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500 #effective op = min(ckt breaker wait time,retry wait time)
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1
      #renew quota every 5 s